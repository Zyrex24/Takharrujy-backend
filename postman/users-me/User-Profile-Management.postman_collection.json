{
  "info": {
    "name": "User Profile Management",
    "description": "Complete user profile management system with Arabic language support\n\n**Features:**\n- Get current user profile\n- Update profile with Arabic names\n- Upload avatar with virus scanning\n- Change password securely\n- Manage user preferences\n- View activity history\n\n**Arabic Language Support:**\n- RTL text handling\n- Arabic name validation\n- Bilingual error messages\n- Arabic activity descriptions\n\n**Security Features:**\n- JWT authentication\n- Password strength validation\n- File virus scanning\n- Activity logging\n\n**Testing Scenarios:**\n✅ Authentication tests\n✅ Arabic text validation\n✅ File upload security\n✅ Input validation\n✅ Error handling",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}/api/v1/users",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "👤 Profile Management",
      "item": [
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has bilingual messages\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"Profile retrieved\");",
                  "    pm.expect(jsonData.messageAr).to.include(\"استرداد الملف الشخصي\");",
                  "});",
                  "",
                  "pm.test(\"User data is present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "    pm.expect(jsonData.data).to.have.property('firstName');",
                  "    pm.expect(jsonData.data).to.have.property('role');",
                  "});",
                  "",
                  "pm.test(\"Arabic name fields are present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('firstNameAr');",
                  "    pm.expect(jsonData.data).to.have.property('lastNameAr');",
                  "    pm.expect(jsonData.data).to.have.property('bioAr');",
                  "});",
                  "",
                  "// Store user data for other tests",
                  "if (pm.response.code === 200) {",
                  "    var user = pm.response.json().data;",
                  "    pm.environment.set(\"user_id\", user.id);",
                  "    pm.environment.set(\"user_email\", user.email);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept-Language",
                "value": "ar,en",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/me",
                  "host": ["{{base_url}}"],
                  "path": ["me"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Profile retrieved successfully\",\n  \"messageAr\": \"تم استرداد الملف الشخصي بنجاح\",\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"ahmed@university.edu.eg\",\n    \"firstName\": \"Ahmed\",\n    \"lastName\": \"Mohamed\",\n    \"firstNameAr\": \"أحمد\",\n    \"lastNameAr\": \"محمد\",\n    \"role\": \"STUDENT\",\n    \"studentId\": \"20200123\",\n    \"phone\": \"+201234567890\",\n    \"dateOfBirth\": \"1995-05-15\",\n    \"isActive\": true,\n    \"isEmailVerified\": true,\n    \"profilePictureUrl\": \"/uploads/avatars/avatar_1.jpg\",\n    \"bio\": \"Computer Science student\",\n    \"bioAr\": \"طالب علوم حاسوب\",\n    \"preferredLanguage\": \"ar\",\n    \"university\": {\n      \"id\": 1,\n      \"name\": \"Cairo University\",\n      \"nameAr\": \"جامعة القاهرة\"\n    }\n  },\n  \"timestamp\": \"2024-12-08T10:00:00Z\"\n}"
            }
          ]
        },
        {
          "name": "Update Profile - Arabic Names",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include(\"updated successfully\");",
                  "    pm.expect(jsonData.messageAr).to.include(\"تم تحديث\");",
                  "});",
                  "",
                  "pm.test(\"Arabic names are updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.firstNameAr).to.equal(\"أحمد محمد\");",
                  "    pm.expect(jsonData.data.bioAr).to.equal(\"مهندس برمجيات متخصص في تطوير التطبيقات الذكية\");",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept-Language",
                "value": "ar,en"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstNameAr\": \"أحمد محمد\",\n  \"lastNameAr\": \"علي حسن\",\n  \"phone\": \"+201234567890\",\n  \"dateOfBirth\": \"1995-05-15\",\n  \"bioAr\": \"مهندس برمجيات متخصص في تطوير التطبيقات الذكية\",\n  \"preferredLanguage\": \"ar\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.exist;",
                  "    pm.expect(jsonData.error.code).to.equal(\"VALIDATION_ERROR\");",
                  "});",
                  "",
                  "pm.test(\"Field errors are provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.fieldErrors).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstNameAr\": \"أ\",\n  \"phone\": \"invalid-phone\",\n  \"preferredLanguage\": \"invalid-lang\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🖼️ Avatar Management",
      "item": [
        {
          "name": "Upload Avatar - Valid Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Avatar uploaded successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include(\"Avatar uploaded\");",
                  "    pm.expect(jsonData.messageAr).to.include(\"تم رفع الصورة\");",
                  "});",
                  "",
                  "pm.test(\"Profile picture URL is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.profilePictureUrl).to.exist;",
                  "    pm.expect(jsonData.data.profilePictureUrl).to.include(\"/uploads/avatars/\");",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable for file upload\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "Avatar image file (JPEG, PNG, WebP, max 5MB)",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/me/avatar",
              "host": ["{{base_url}}"],
              "path": ["me", "avatar"]
            }
          },
          "response": []
        },
        {
          "name": "Upload Avatar - File Too Large",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"File size error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.message).to.include(\"size\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "Large file > 5MB",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/me/avatar",
              "host": ["{{base_url}}"],
              "path": ["me", "avatar"]
            }
          },
          "response": []
        },
        {
          "name": "Upload Avatar - Invalid File Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid file type error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.message).to.include(\"format\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "Non-image file (e.g., .txt, .pdf)",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/me/avatar",
              "host": ["{{base_url}}"],
              "path": ["me", "avatar"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🔐 Security",
      "item": [
        {
          "name": "Change Password - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password changed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include(\"Password changed\");",
                  "    pm.expect(jsonData.messageAr).to.include(\"تم تغيير كلمة المرور\");",
                  "});",
                  "",
                  "pm.test(\"No sensitive data in response\", function () {",
                  "    var responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include(\"password\");",
                  "    pm.expect(responseText).to.not.include(\"hash\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{current_password}}\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"NewSecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me/password",
              "host": ["{{base_url}}"],
              "path": ["me", "password"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password - Passwords Don't Match",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Password mismatch error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.message).to.include(\"match\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{current_password}}\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"DifferentPass456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me/password",
              "host": ["{{base_url}}"],
              "path": ["me", "password"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Weak password error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.message).to.include(\"Password must contain\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{current_password}}\",\n  \"newPassword\": \"weak\",\n  \"confirmPassword\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me/password",
              "host": ["{{base_url}}"],
              "path": ["me", "password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "⚙️ Preferences",
      "item": [
        {
          "name": "Get User Preferences",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Preferences retrieved successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.messageAr).to.include(\"تم استرداد التفضيلات\");",
                  "});",
                  "",
                  "pm.test(\"All preference categories present\", function () {",
                  "    var prefs = pm.response.json().data;",
                  "    // Notification preferences",
                  "    pm.expect(prefs).to.have.property('emailNotifications');",
                  "    pm.expect(prefs).to.have.property('pushNotifications');",
                  "    pm.expect(prefs).to.have.property('projectUpdates');",
                  "    // UI preferences",
                  "    pm.expect(prefs).to.have.property('theme');",
                  "    pm.expect(prefs).to.have.property('language');",
                  "    pm.expect(prefs).to.have.property('timezone');",
                  "    // Privacy preferences",
                  "    pm.expect(prefs).to.have.property('profileVisibility');",
                  "    pm.expect(prefs).to.have.property('showEmail');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me/preferences",
              "host": ["{{base_url}}"],
              "path": ["me", "preferences"]
            }
          },
          "response": []
        },
        {
          "name": "Update Preferences - Complete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Preferences updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.messageAr).to.include(\"تم تحديث التفضيلات\");",
                  "});",
                  "",
                  "pm.test(\"Updated values are reflected\", function () {",
                  "    var prefs = pm.response.json().data;",
                  "    pm.expect(prefs.theme).to.equal(\"dark\");",
                  "    pm.expect(prefs.language).to.equal(\"en\");",
                  "    pm.expect(prefs.emailNotifications).to.be.false;",
                  "    pm.expect(prefs.profileVisibility).to.equal(\"private\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"emailNotifications\": false,\n  \"pushNotifications\": true,\n  \"smsNotifications\": false,\n  \"projectUpdates\": true,\n  \"taskAssignments\": true,\n  \"taskDueReminders\": true,\n  \"projectInvitations\": true,\n  \"newMessages\": true,\n  \"messageMentions\": true,\n  \"submissionNotifications\": true,\n  \"progressReports\": true,\n  \"theme\": \"dark\",\n  \"language\": \"en\",\n  \"timezone\": \"America/New_York\",\n  \"profileVisibility\": \"private\",\n  \"showEmail\": false,\n  \"showPhone\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/me/preferences",
              "host": ["{{base_url}}"],
              "path": ["me", "preferences"]
            }
          },
          "response": []
        },
        {
          "name": "Update Preferences - Invalid Values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation errors for invalid values\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.fieldErrors).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"invalid_theme\",\n  \"language\": \"invalid_language\",\n  \"profileVisibility\": \"invalid_visibility\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/me/preferences",
              "host": ["{{base_url}}"],
              "path": ["me", "preferences"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "📊 Activity History",
      "item": [
        {
          "name": "Get Activity History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Activity history retrieved successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.messageAr).to.include(\"سجل الأنشطة\");",
                  "});",
                  "",
                  "pm.test(\"Paginated response structure\", function () {",
                  "    var data = pm.response.json().data;",
                  "    pm.expect(data).to.have.property('content');",
                  "    pm.expect(data).to.have.property('totalElements');",
                  "    pm.expect(data).to.have.property('totalPages');",
                  "    pm.expect(data).to.have.property('size');",
                  "    pm.expect(data).to.have.property('number');",
                  "});",
                  "",
                  "pm.test(\"Activity items have required fields\", function () {",
                  "    var activities = pm.response.json().data.content;",
                  "    if (activities && activities.length > 0) {",
                  "        var activity = activities[0];",
                  "        pm.expect(activity).to.have.property('id');",
                  "        pm.expect(activity).to.have.property('activityType');",
                  "        pm.expect(activity).to.have.property('description');",
                  "        pm.expect(activity).to.have.property('descriptionAr');",
                  "        pm.expect(activity).to.have.property('timestamp');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me/activity?page=0&size=20",
              "host": ["{{base_url}}"],
              "path": ["me", "activity"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (0-based)"
                },
                {
                  "key": "size",
                  "value": "20",
                  "description": "Page size (max 100)"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Recent Activity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Recent activities retrieved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Activities are from last 24 hours\", function () {",
                  "    var activities = pm.response.json().data.content;",
                  "    var now = new Date();",
                  "    var yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);",
                  "    ",
                  "    activities.forEach(function(activity) {",
                  "        var activityDate = new Date(activity.timestamp);",
                  "        pm.expect(activityDate).to.be.at.least(yesterday);",
                  "        pm.expect(activityDate).to.be.at.most(now);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me/activity?recent=true&page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["me", "activity"],
              "query": [
                {
                  "key": "recent",
                  "value": "true",
                  "description": "Filter recent activities only"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Activity - Pagination Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pagination parameters are respected\", function () {",
                  "    var data = pm.response.json().data;",
                  "    pm.expect(data.size).to.be.at.most(5); // Requested size",
                  "    pm.expect(data.number).to.equal(1); // Requested page",
                  "});",
                  "",
                  "pm.test(\"Invalid pagination parameters are corrected\", function () {",
                  "    // This test assumes the API corrects invalid parameters",
                  "    var data = pm.response.json().data;",
                  "    pm.expect(data.number).to.be.at.least(0); // Page should not be negative",
                  "    pm.expect(data.size).to.be.at.most(100); // Size should not exceed limit",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me/activity?page=1&size=5",
              "host": ["{{base_url}}"],
              "path": ["me", "activity"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Second page"
                },
                {
                  "key": "size",
                  "value": "5",
                  "description": "Small page size"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🔒 Authentication Tests",
      "item": [
        {
          "name": "Unauthorized Access - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Unauthorized error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Invalid token error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid_token_here",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
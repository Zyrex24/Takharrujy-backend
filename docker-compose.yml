# Docker Compose for Takharrujy Platform Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: takharrujy-postgres
    environment:
      POSTGRES_DB: takharrujy_dev
      POSTGRES_USER: takharrujy
      POSTGRES_PASSWORD: takharrujy
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U takharrujy -d takharrujy_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - takharrujy-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: takharrujy-redis
    command: redis-server --appendonly yes --requirepass takharrujy-redis-password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - takharrujy-network

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: takharrujy-app
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DATABASE_URL: jdbc:postgresql://postgres:5432/takharrujy_dev
      DATABASE_USERNAME: takharrujy
      DATABASE_PASSWORD: takharrujy
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: takharrujy-redis-password
      JWT_SECRET: takharrujy-development-secret-key-change-in-production
      LOG_LEVEL: DEBUG
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - takharrujy-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: takharrujy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - takharrujy-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

networks:
  takharrujy-network:
    driver: bridge
    name: takharrujy-network